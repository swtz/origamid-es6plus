// ANOTAÇÕES | ORIGAMID - ES6+ | 08 Mais Javascript

// AULA 0803 | Closures e Debugging

// Só existe 'closure' quando há a relação de função pai e função filha.
let item1 = 1;
function funcao1() { // pai
  let item2 = 2;
  function funcao2() { // filha
    let item3 = 3;
    console.log(item1);
    console.log(item2);
    console.log(item3);
  }
}
// A 'funcao2' possui 4 escopos.
// 1st: local -> variável 'item3';
// 2nd: CLOSURE -> escopo de função dentro de função -> variável 'item2';
// 3rd: script -> variável 'item1';
// 4th: global/window.

// "É como se a função filha carregasse uma mochila com as variáveis da sua função pai".
// O escopo 'Closure' é a mochila com essas variáveis.

// Debugging tip:
debugger; // palavra chave que seta um breakpoint na linha onde é declarada.


// Exemplo de closure:
function contagem() {
  let total = 0;
  return function incremento() {
    total++;
    console.log(total);
  }
}
const activeIncrement = contagem(); // 'activeIncrement' faz referência à função 'incremento'.

activeIncrement(); // 1
activeIncrement(); // 2
activeIncrement(); // 3
activeIncrement(); // 4
// O valor de 'total' atualizado pela primeira chamada da função filha
// é usado nas outras chamadas também, ou seja, o escopo closure é
// que possibilita o acesso à variável atualizada da função pai.

// O script 'closures-factoryFn.js' mostra o uso do escopo closure (usar debugger).