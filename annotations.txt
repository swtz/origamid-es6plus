// ANOTAÇÕES | ORIGAMID - ES6+ | 08 Mais Javascript

// AULA 0802 | Factory Function

// Possuem basicamente a mesma função que
// constructor functions / classes, ou seja,
// são funções que retornam um objeto sem o uso
// da key word 'new'. Isso quer dizer que os métodos
// pertencem ao objeto em si e NÃO AO SEU PROTÓTIPO.

// Por convenção, as factoryFn seguem o padrão camelCase.
// Exemplo de factoryFn:
function createButton(text) {
  function element() {
    const btnElement = document.createElement('button');
    btnElement.innerText = text;
    return btnElement;
  }

  return {
    text,
    element
  }
}
const btnBlue = createButton('Comprar'); // [object Object]


// FactoryFn permitem criar métodos e propriedades realmente privados:
// Exemplo:
function createNode(text) {
  const secretWord = 'raioForteCaiuOntemFazendoGrandeEstrago';

  return {
    text,
  }
}
// Somente será acessível o que está sendo retornado. Tudo que estiver
// fora desse retorno será invisível para quem usa esse objeto. Pode
// ser útil para métodos internos que não são úteis no objeto final.


// Caso o dev queira 'congelar' o objeto para evitar futuras alterações
"use strict";
function createNode(text) {
  return Object.freeze({
    text,
  })
}
const object = createNode('foo');
object.text = 'bar'; // exceção é lançada no console.


// Uma forma de instanciar um objeto sem o uso da key word 'new' usando
// uma constructor function:
function Pessoa(nome) {
  if (!(this instanceof Pessoa)) // "se o usuário não passar o 'new' na frente"
    return new Pessoa(nome); // "acessa novamente o construtor, porém, agora, com o 'new' na frente"
  this.nome = nome // segue o código de criação do objeto
}

Pessoa.prototype.andar = function () {
  return `${this.nome} andou`;
}

const designer = Pessoa('André');
console.log(designer); // Pessoa: {nome: 'André'};


// Obs.:
if (!(this instanceof Object)); // Verifica se o prototype de 'this' 
// possui os métodos e propriedades do constructor 'Object'.
// Javascript

if (!new.target); // ES6+
