// ANOTAÇÕES | ORIGAMID - ES6+ | 06 Async JS

// AULA 0606 | async / await

// async -> key word usada na declaração de uma função a qual
// possui partes assíncronas e que se pretende esperar o resultado
// dessas instruções para continuar o código.

// await -> key word usada ANTES de um método que RETORNA UMA Promise
// o interpretador vai esperar a resolução dessa Promise e retorna
// o RESULTADO da mesma.

// Exemplo:
async function getData() {
  const resData = await fetch('../data.json') // retorna o objeto 'response'
  const jsonData = await resData.json(); // transforma o json e retorna o objeto
  // sem o 'await' o conteúdo da variável seria uma 'Promise'
  console.log(jsonData.class)
}
getData();

// then Vs. async
// Diferença -> async possui uma sintaxe mais limpa

// A sintaxe do 'async' permite tratar exceções com a sintaxe try / catch
// Exemplo:
function test() {
  try {
    const calc = 30 / 0; // return 'infinity' | >_< ES6+ XD |
    calc = null;
  } catch (error) {
    console.log(error)
  }
}
test();

// Exemplo para caso exista 2 requisições assíncronas e que o objetivo
// seja sincronizar o resultado delas:
async function getData() {
  const promiseData = fetch('../data.json') // parte mais demorada
  const promiseCustomers = fetch('../customers.json') // parte mais demorada

  const jsonData = await (await promiseData).json(); // espera a resposta
  const jsonCustomers = await (await promiseCustomers).json(); // espera a resposta

  document.body.innerText = `${jsonData.class} & ${jsonCustomers.name}`;
}
getData();

// To remember:
// O resultado da expressão à frente do 'await' tem ser uma 'Promise'.
// O retorno do 'await' sempre será o 'result' dessa 'Promise'.
