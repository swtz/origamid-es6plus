// ANOTAÇÕES | ORIGAMID - ES6+ | 05 EFEITOS NO DOM

// AULA 0507 | setTimeout e setInterval

setTimeout((text) => {
  console.log(text);
}, 2000, 'Passou 2s')

// setTimeout(callbackFn, timeout, arg1, arg2, argN): number

// Resgatando o conteúdo aprendido na aula 'Event Bubble',
// ao executar um determinado script que contém um setTimeout SEM TEMPO,
// é colocado na Web Api a 'callbackFn' com o 'timeout'

// Web Api: time<-->callbackFn

// Como o tempo é indefinido, a 'callbackFn' é colocada na Callback Queue na hora
// Enquanto isso, o script é executado normalmente

// Após o término do script, a Call Stack é esvaziada e a Callback Queue é verificada
// pelo Event Loop. Se houver algo na Callback Queue, ele é colocado na Call Stack e
// é executado logo em seguida.

// #!important
const btn = document.querySelector('button');
btn.addEventListener('click', handleClick);

// # function
function handleClick() {
  setTimeout(function () {
    console.log(this);
    this.classList.add('ativo');
  }, 1000);
}

// # arrow function
function handleClick() {
  setTimeout(() => {
    console.log(this);
    this.classList.add('ativo');
  }, 1000);
}

// function -> usa o this do escopo onde foi criada, ou seja,
// como o 'setTimeout' é uma função do objeto 'window', o this
// é o objeto 'window'. Logo, 'classList.add' não existe nesse objeto.

// arrow function -> usa o this do objeto pai, ou seja, o this
// do método 'handleClick' que é o elemento 'btn'. Assim, 'classList.add'
// existe nesse objeto.

// setInterval(callbackFn, timeout, arg1, arg2, argN): number
// Porém, 'setInterval' executa a 'callbackFn' de forma repetida
// com base no 'timeout' definido. Tem o comportamento de um 'loop'.

// É possível parar a execução do 'setInterval' com a função 'clearInterval'.
// Entretanto é necessário armazenar o retorno do 'setInterval' em uma variável.
// Exemplo de uso:

let i = 0;
const until10 = setInterval(callbackFn, 300);

function callbackFn() {
  console.log(i++);
  if (i > 10) {
    clearInterval(until10);
    console.log('This is the end');
  }
}

// 'clearInterval' retira o 'setInterval' da Web Api. Logo, 'setInterval'
// não vai para a 'Callback Queue' e consequentemente não vai para a 'Call Stack'.
